Object类中有一个方法：
public native int hashCode();
Java中的hashCode方法就是根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的字段等）映射成一个数值，这个数值称作为散列值。

主要作用用于集合框架判重。如：hashmap、hashtable之类

hashmap，put过程：先对传进来的key进行hash，然后比较是否有相同的hash值，没有就直接插入散列值。
有的话，再去比较值的equals，有相同的则替换旧值，没有就根据解决冲突方法插入值。

重写equals方法一定要重写hashcode方法。

结论：
hashcode不同的2个对象，一定不相等。反之，不一定相同。
equals相同的2个对象，hashcode一定相同。反之不一定相同。

如果要判断两个对象是否真正相等，必须通过equals方法。

也就是说对于两个对象，如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；

如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；

如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；

如果两个对象的hashcode值相等，则equals方法得到的结果未知。
